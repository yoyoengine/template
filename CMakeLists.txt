# This file was generated by yoyoengine. (https://github.com/yoyoengine/yoyoengine)
# Copyright (C) 2023-2025  Ryan Zmuda
#
# Licensed under the MIT license. See LICENSE file in the project root for details.

# yoyoengine build system 3.0
#
# I'm going to write a pure CMake build system, and start with the basics and leave more advanced things to implement later.
#
# Notes:
# - we use Cmake's build types to automatically declare debug/release
# - when we add toolchains, we will need to set them as a var and include() them after we set all our other vars
#
# Example Usage:
#
# mkdir build && cd build
# cmake -DGAME_NAME=XXXXXXX -DGAME_CFLAGS -DCMAKE_TOOLCHAIN_FILE=/path/to/toolchain.cmake ..
#

#############################################
#                   Setup                   #
#############################################

cmake_minimum_required(VERSION 3.22.1)

if(WIN32)
    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded") # Statically link the runtime
endif()

include(FetchContent)
Set(FETCHCONTENT_QUIET FALSE)

# TODO: removeme? -- Generic build flags
set(CMAKE_C_FLAGS "" CACHE STRING "C flags to be used in the build")

message(STATUS "Configuring for target platform: ${CMAKE_SYSTEM_NAME}")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/$<CONFIGURATION>")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/$<CONFIGURATION>")

# Game build flags
set(GAME_NAME "yoyoengine_game" CACHE STRING "The name of the game")
set(GAME_RC_PATH "" CACHE STRING "The path to the rc icon file")

# TODO: disabled because we are phasing out yoyolua api
# we don't build the lua runtime from the game,
# the editor builds it and packs it into the yep for us
# set(BUILD_LUA_RUNTIME off CACHE BOOL "Build the Lua runtime")

# Set YOYO_ENGINE_BUILD_TAG to main if unset
if(NOT DEFINED YOYO_ENGINE_BUILD_TAG)
    set(YOYO_ENGINE_BUILD_TAG "main" CACHE STRING "Tag for yoyoengine")
endif()

#############################################
#               Configure Game              #
#############################################

# Declare the game
project(${GAME_NAME})

# TODO: is this needed?
# append CUSTOM_CFLAGS to CMAKE_C_FLAGS
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CUSTOM_CFLAGS}")

# include any cross compilation toolchains (we do it here so we have access to vars)
if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
    # add a custom target that runs before each build to create a em_tmp folder and copy yep into it, and settings.yoyo
    add_custom_target(emscripten_setup ALL
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/em_tmp
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/*.yep ${CMAKE_BINARY_DIR}/em_tmp
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/settings.yoyo ${CMAKE_BINARY_DIR}/em_tmp
        COMMENT "Setting up Emscripten temp ..."
    )
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows") # TODO: this is windows specific but only for cross comp, msvc does not like this
    # required for cmake to compile as windows
    # set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mwindows")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    # default
else()
    # something weird is happening
    message(FATAL_ERROR "Invalid target platform: ${CMAKE_SYSTEM_NAME}")
endif()

# Build the game
file(GLOB_RECURSE SOURCES CMAKE_CONFIGURE_DEPENDS ${CMAKE_SOURCE_DIR}/custom/src/*.c)

## rpath on linux ##
SET(CMAKE_SKIP_BUILD_RPATH FALSE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
SET(CMAKE_INSTALL_RPATH $ORIGIN)
# SET(CMAKE_INSTALL_RPATH $ORIGIN/lib)
####################

# TODO: re-evaluate if this is needed (we removed net)
# # force SDL_net specifically to not think we are unix
# if(MSVC)
#     add_compile_definitions(WIN32)
# endif()

add_executable(${GAME_NAME} ${CMAKE_SOURCE_DIR}/entry.c ${SOURCES} ${GAME_RC_PATH})

# We either use a local copy, or grab the engine from the specified tag
if(YOYO_ENGINE_SOURCE_DIR)
    add_subdirectory(${YOYO_ENGINE_SOURCE_DIR} yoyoengine-local)
else()
    # Grab the engine from github
    FetchContent_Declare(
        yoyoengine
        GIT_REPOSITORY https://github.com/yoyoengine/yoyoengine.git
        GIT_TAG ${YOYO_ENGINE_BUILD_TAG}
        GIT_PROGRESS TRUE
    )
    FetchContent_MakeAvailable(yoyoengine)
    add_subdirectory(${yoyoengine_SOURCE_DIR}/engine yoyoengine)
endif()

# set some emscripten specific build flags
if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
    target_link_options(${GAME_NAME} PRIVATE --bind -Wbad-function-cast -Wcast-function-type -sALLOW_MEMORY_GROWTH=1 -sMAXIMUM_MEMORY=1gb --preload-file ${CMAKE_BINARY_DIR}/em_tmp@/)
    set(CMAKE_EXECUTABLE_SUFFIX ".html")
endif()

# #############################################
# #              Tricks / Plugins             #
# #############################################

# # if not on emscripten
# if(NOT CMAKE_SYSTEM_NAME STREQUAL "Emscripten")

#     message(STATUS "Adding tricks ...")

#     # set some vars for the tricks
#     set(YOYO_TRICK_BUILD_DIR ${CMAKE_BINARY_DIR}/$<CONFIGURATION>/tricks)
#     file(MAKE_DIRECTORY ${YOYO_TRICK_BUILD_DIR})

#     set(YOYO_GAME_LINK_DIR ${CMAKE_BINARY_DIR}/$<CONFIGURATION>/lib)
#     target_link_directories(${GAME_NAME} PRIVATE ${CMAKE_BINARY_DIR}/$<CONFIGURATION>/tricks)

#     file(GLOB PLUGIN_DIRS CMAKE_CONFIGURE_DEPENDS "${CMAKE_SOURCE_DIR}/tricks/*")
#     foreach(PLUGIN_DIR ${PLUGIN_DIRS})
#         if(IS_DIRECTORY ${PLUGIN_DIR})
#             get_filename_component(PLUGIN_NAME ${PLUGIN_DIR} NAME)
#             message(STATUS "Adding trick: ${PLUGIN_NAME}")
#             add_subdirectory(${PLUGIN_DIR})
#             target_include_directories(${GAME_NAME} PRIVATE ${PLUGIN_DIR}/include)
#             add_dependencies(${PLUGIN_NAME} yoyoengine)
#             target_link_libraries(${GAME_NAME} PRIVATE ${PLUGIN_NAME})
#         endif()
#     endforeach()

# endif()

#############################################
#           Finish Configuring Game         #
#############################################

target_link_libraries(${GAME_NAME} PRIVATE yoyoengine)
include_directories(${CMAKE_SOURCE_DIR}/custom/include)

# output the game in the bin directory
set_target_properties(${GAME_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/$<CONFIGURATION>)

#############################################
#             Post Build Copying            #
#############################################

# WARNING: this will fail if you do not have yep files to copy!
# The game depends on at the last, engine.yep! If you are building
# from outside of the editor context, you will need to create engine.yep!

# use cmake timestamp tracking to copy settings.yoyo as needed
add_custom_command(
    OUTPUT ${CMAKE_BINARY_DIR}/$<CONFIGURATION>/settings.yoyo
    DEPENDS ${CMAKE_SOURCE_DIR}/settings.yoyo
    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/settings.yoyo ${CMAKE_BINARY_DIR}/$<CONFIGURATION>
    COMMENT "Copying settings.yoyo"
)
add_custom_target(copy_settings_yoyo ALL
    DEPENDS ${CMAKE_BINARY_DIR}/$<CONFIGURATION>/settings.yoyo
)

# TODO: FIXME: RYAN SOON
# # also hard coded for .yep files, generic doesnt work
# add_custom_command(
#     OUTPUT ${CMAKE_BINARY_DIR}/$<CONFIGURATION>/engine.yep
#     DEPENDS ${CMAKE_SOURCE_DIR}/engine.yep
#     COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/engine.yep ${CMAKE_BINARY_DIR}/$<CONFIGURATION>
#     COMMENT "Copying engine.yep"
# )
# add_custom_command(
#     OUTPUT ${CMAKE_BINARY_DIR}/$<CONFIGURATION>/resources.yep
#     DEPENDS ${CMAKE_SOURCE_DIR}/resources.yep
#     COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/resources.yep ${CMAKE_BINARY_DIR}/$<CONFIGURATION>
#     COMMENT "Copying resources.yep"
# )
# add_custom_target(copy_critical_yeps ALL
#     DEPENDS 
#         ${CMAKE_BINARY_DIR}/$<CONFIGURATION>/engine.yep
#         ${CMAKE_BINARY_DIR}/$<CONFIGURATION>/resources.yep
# )

#############################################
#                  Cleanup                  #
#############################################

# on certain platforms, we want to cleanup unnecessary files

if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    # windows specific cleanup
    add_custom_target(windows_cleanup ALL
        # COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/bin/Windows/libyoyoengine.dll.a
        COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}/bin/Windows/lib

        # COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/bin/Windows/tricks/* ${CMAKE_BINARY_DIR}/bin/Windows || true
        # COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}/bin/Windows/tricks || true

        COMMENT "Performing Windows Cleanup ..."
    )
    add_dependencies(windows_cleanup copy_settings_yoyo yoyoengine ${GAME_NAME})
elseif(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
    # emscripten specific cleanup
    add_custom_target(emscripten_cleanup ALL
        COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/bin/Emscripten/*.yep
        COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/bin/Emscripten/settings.yoyo
        COMMAND ${CMAKE_COMMAND} -E rename ${CMAKE_BINARY_DIR}/bin/Emscripten/${GAME_NAME}.html ${CMAKE_BINARY_DIR}/bin/Emscripten/index.html
        COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}/bin/Emscripten/lib
        COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/bin/Emscripten/*.so
        COMMENT "Performing Emscripten Cleanup ..."
    )
else()
    # default
endif()

#############################################
#                  Custom                   #
#############################################

# Add a custom target that runs the binary
# TODO: native windows run target
if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    add_custom_target(run
        COMMAND wine "$<TARGET_FILE:${GAME_NAME}>.exe"
        # DEPENDS ${GAME_NAME}
        COMMENT "Running the game with Wine ..."
    )
elseif(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
    add_custom_target(run
        COMMAND emrun --no_browser --port 8080 "$<TARGET_FILE:${GAME_NAME}>.html"
        # DEPENDS ${GAME_NAME}
        COMMENT "Running the game with emrun ..."
    )
else()
    add_custom_target(run
        # print out the full path to the game binary
        COMMAND ${CMAKE_COMMAND} -E echo "Running game: ${CMAKE_BINARY_DIR}/$<CONFIGURATION>/${GAME_NAME}"

        COMMAND "$<TARGET_FILE:${GAME_NAME}>" &
        DEPENDS ${GAME_NAME}
        COMMENT "Running the game ..."
    )
endif()