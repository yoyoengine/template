# This file was generated by yoyoengine. (https://github.com/zoogies/yoyoengine)
# Copyright (C) 2024  Ryan Zmuda
#
# Licensed under the MIT license. See LICENSE file in the project root for details.

# yoyoengine build system 3.0
#
# I'm going to write a pure CMake build system, and start with the basics and leave more advanced things to implement later.
#
# TODO:
# - Tricks
#
# Notes:
# - we use Cmake's build types to automatically declare debug/release
# - when we add toolchains, we will need to set them as a var and include() them after we set all our other vars
#
# Example Usage:
#
# mkdir build && cd build
# cmake -DYOYO_ENGINE_SOURCE_DIR=XXXXXX -DGAME_NAME=XXXXXXX -DGAME_CFLAGS -DCMAKE_TOOLCHAIN_FILE=/path/to/toolchain.cmake ..
#

#############################################
#                   Setup                   #
#############################################

cmake_minimum_required(VERSION 3.22.1)

# Generic build flags
set(CMAKE_C_FLAGS "" CACHE STRING "C flags to be used in the build")

message(STATUS "Configuring for target platform: ${CMAKE_SYSTEM_NAME}")

# Engine build flags
set(YOYO_ENGINE_SOURCE_DIR ${CMAKE_SOURCE_DIR}/../yoyoengine/engine CACHE STRING "The source directory of the engine")
set(YOYO_ENGINE_BUILD_RELEASE off CACHE BOOL "Build the engine in debug mode")

# Game build flags
set(GAME_NAME "yoyoengine_game" CACHE STRING "The name of the game")
set(GAME_RC_PATH "" CACHE STRING "The path to the rc icon file")

#############################################
#               Configure Game              #
#############################################

# Declare the game
project(${GAME_NAME})

# Flags that MUST come after project()
set(GAME_BUILD_DESTINATION ${CMAKE_BINARY_DIR}/bin/${CMAKE_SYSTEM_NAME} CACHE STRING "The destination of the final optimized game build")

# append CUSTOM_CFLAGS to CMAKE_C_FLAGS
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CUSTOM_CFLAGS}")

# include any cross compilation toolchains (we do it here so we have access to vars)
if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
    # add a custom target that runs before each build to create a em_tmp folder and copy yep into it, and settings.yoyo
    add_custom_target(emscripten_setup ALL
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/em_tmp
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/*.yep ${CMAKE_BINARY_DIR}/em_tmp
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/settings.yoyo ${CMAKE_BINARY_DIR}/em_tmp
        COMMENT "Setting up Emscripten temp ..."
    )
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    # required for cmake to compile as windows
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mwindows")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    # default
else()
    # something weird is happening
    message(FATAL_ERROR "Invalid target platform: ${CMAKE_SYSTEM_NAME}")
endif()

# Include the engine
add_subdirectory(${YOYO_ENGINE_SOURCE_DIR} yoyoengine)

# Build the game
file(GLOB_RECURSE SOURCES CMAKE_CONFIGURE_DEPENDS ${CMAKE_SOURCE_DIR}/custom/src/*.c)

add_executable(${GAME_NAME} ${CMAKE_SOURCE_DIR}/entry.c ${SOURCES} ${GAME_RC_PATH})

# set some emscripten specific build flags
if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
    target_link_options(${GAME_NAME} PRIVATE --bind -Wbad-function-cast -Wcast-function-type -sALLOW_MEMORY_GROWTH=1 -sMAXIMUM_MEMORY=1gb --preload-file ${CMAKE_BINARY_DIR}/em_tmp@/)
    set(CMAKE_EXECUTABLE_SUFFIX ".html")
endif()

target_link_libraries(${GAME_NAME} PRIVATE yoyoengine)
include_directories(${CMAKE_SOURCE_DIR}/custom/include)

# most includes are provided by the engine public targets, but there are header only libs we also need
target_include_directories(${GAME_NAME} PRIVATE ${YOYO_ENGINE_SOURCE_DIR}/dist/include)

# output the game in the bin directory
set_target_properties(${GAME_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/${CMAKE_SYSTEM_NAME})

# set rpath for Linux (will allow the game to find the engine shared library on every system)
if(UNIX)
    set(CMAKE_SKIP_BUILD_RPATH FALSE)
    set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
    set(CMAKE_INSTALL_RPATH $ORIGIN/lib)
endif()

#############################################
#             Post Build Copying            #
#############################################

# on every single build (not just configure) copy ${CMAKE_SOURCE_DIR}/*.yep into GAME_BUILD_DESTINATION
# TODO: make me incremental
add_custom_target(copy_yep_files ALL
    COMMAND ${CMAKE_COMMAND} -E echo "Copying all .yep files to ${GAME_BUILD_DESTINATION}"
    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/*.yep ${GAME_BUILD_DESTINATION}
    COMMENT "Copying .yep files"
)

# on every single build, copy settings.yoyo into GAME_BUILD_DESTINATION
add_custom_target(copy_settings_yoyo ALL
    COMMAND ${CMAKE_COMMAND} -E echo "Copying settings.yoyo to ${GAME_BUILD_DESTINATION}"
    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/settings.yoyo ${GAME_BUILD_DESTINATION}
    COMMENT "Copying settings.yoyo"
)

#############################################
#                  Cleanup                  #
#############################################

# on certain platforms, we want to cleanup unnecessary files

if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    # windows specific cleanup
    add_custom_target(windows_cleanup ALL
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/bin/Windows/lib/libyoyoengine.dll ${CMAKE_BINARY_DIR}/bin/Windows
        COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/bin/Windows/libyoyoengine.dll.a
        COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}/bin/Windows/lib
        COMMENT "Performing Windows Cleanup ..."
    )
elseif(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
    # emscripten specific cleanup
    add_custom_target(emscripten_cleanup ALL
        COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/bin/Emscripten/*.yep
        COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/bin/Emscripten/settings.yoyo
        COMMAND ${CMAKE_COMMAND} -E rename ${CMAKE_BINARY_DIR}/bin/Emscripten/${GAME_NAME}.html ${CMAKE_BINARY_DIR}/bin/Emscripten/index.html
        COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}/bin/Emscripten/lib
        COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/bin/Emscripten/*.so
        COMMENT "Performing Emscripten Cleanup ..."
    )
else()
    # default
endif()